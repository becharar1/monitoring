[[metric]]
context = "sessions"
labels = [ "status", "type" ]
metricsdesc = { value= "Gauge metric with count of sessions by status and type." }
request = "SELECT status, type, COUNT(*) as value FROM v$session GROUP BY status, type"

[[metric]]
context = "resource"
labels = [ "resource_name" ]
metricsdesc = { current_utilization= "Generic counter metric from v$resource_limit view in Oracle (current value).", limit_value="Generic counter metric from v$resource_limit view in Oracle (UNLIMITED: -1)." }
request="SELECT resource_name,current_utilization,CASE WHEN TRIM(limit_value) LIKE 'UNLIMITED' THEN '-1' ELSE TRIM(limit_value) END as limit_value FROM v$resource_limit"

[[metric]]
context = "asm_diskgroup"
labels = [ "name" ]
metricsdesc = { total = "Total size of ASM disk group.", free = "Free space available on ASM disk group." }
request = "SELECT name,total_mb*1024*1024 as total,free_mb*1024*1024 as free FROM v$asm_diskgroup_stat where exists (select 1 from v$datafile where name like '+%')"
ignorezeroresult = true

[[metric]]
context="asm_diskgroup"
labels=["NAME"]
metricsdesc={TOTAL_MB ="Total capacity of the disk group (in megabytes)", FREE_MB="Unused capacity of the disk group (in megabytes)", USABLE_FILE_MB="Amount of free space that can be safely utilized "}
request ="SELECT NAME dgname, TOTAL_MB, USABLE_FILE_MB from v$asm_diskgroup"

[[metric]]
context = "activity"
metricsdesc = { value="Generic counter metric from v$sysstat view in Oracle." }
fieldtoappend = "name"
request = "SELECT name, value FROM v$sysstat WHERE name IN ('parse count (total)', 'execute count', 'user commits', 'user rollbacks')"

[[metric]]
context = "process"
metricsdesc = { count="Gauge metric with count of processes." }
request = "SELECT COUNT(*) as count FROM v$process"

[[metric]]
context = "wait_time"
metricsdesc = { value="Generic counter metric from v$waitclassmetric view in Oracle." }
fieldtoappend= "wait_class"
request = '''
SELECT
  n.wait_class as WAIT_CLASS,
  round(m.time_waited/m.INTSIZE_CSEC,3) as VALUE
FROM
  v$waitclassmetric  m, v$system_wait_class n
WHERE
  m.wait_class_id=n.wait_class_id AND n.wait_class != 'Idle'
'''


[[metric]]
context = "tablespace"
labels = [ "tablespace", "type" ]
metricsdesc = { bytes = "Generic counter metric of tablespaces bytes in Oracle.", max_bytes = "Generic counter metric of tablespaces max bytes in Oracle.", free = "Generic counter metric of tablespaces free bytes in Oracle.", used_percent = "Gauge metric showing as a percentage of how much of the tablespace has been used." }
request = '''
SELECT
    dt.tablespace_name as tablespace,
    dt.contents as type,
    dt.block_size * dtum.used_space as bytes,
    dt.block_size * dtum.tablespace_size as max_bytes,
    dt.block_size * (dtum.tablespace_size - dtum.used_space) as free,
    dtum.used_percent
FROM  dba_tablespace_usage_metrics dtum, dba_tablespaces dt
WHERE dtum.tablespace_name = dt.tablespace_name
ORDER by tablespace
'''
[[metric]]
context="dml"
metricsdesc={ inserts = "Generic counter metric for insert operations", deletes= "", updates="Generic counter metric for update operations", updates="Generic counter metric for update operations"}
request = '''
SELECT
    NVL(sum(INSERTS),0) as inserts,
    NVL(sum(DELETES),0) as deletes,
    NVL(sum(UPDATES),0) as updates
FROM dba_tab_modifications
WHERE TABLE_OWNER not in ('SYS','SYSTEM','XDB','EXFSYS','CTXSYS','SYSMAN')
'''

[[metric]]
context = "diskgroup_size"
labels = [ "inst_id", "node_name" , "instance_name", "diskgroup_name" ]
metricsdesc = { total = "Total size of ASM disk group in MB.", free = "Free space available on ASM disk group in MB." }
request = '''
SELECT instance_number            AS inst_id,
       host_name                  AS node_name,
       instance_name,
       name                       AS diskgroup_name,
       total_mb * 1024 * 1024     AS total,
       free_mb * 1024 * 1024      AS free
  FROM v$asm_diskgroup_stat, v$instance
'''
ignorezeroresult = true

[[metric]]
context = "asmuptime"
labels = [ "inst_id", "node_name", "instance_name"]
metricsdesc = { uptime = "ASM uptime" }
request = '''
SELECT instance_number                      AS inst_id,
       host_name                            AS node_name,
       instance_name,
       (SYSDATE - startup_time) * 86400     AS uptime
  FROM v$instance
'''

#[[metric]]
#context = "asm_dg_stat"
#labels = [ "inst_id", "diskgroup_name", "node_name", "instance_name" ]
#metricsdesc = { reads = "Total number of I/O read requests for the DG.", writes = "Total number of I/O write requests for the DG.", bytes_read = "Total number of bytes read from the DG", bytes_written = "Total number of bytes written from the DG", iops = "Total number of I/O requests for the DG" }
#metricstype = { reads = "counter", writes = "counter", bytes_read = "counter", bytes_written = "counter", iops = "counter" }
#request = '''
#  SELECT i.instance_number              AS inst_id,
#         i.host_name                    AS node_name,
#         i.instance_name,
#         g.name                         AS diskgroup_name,
#         SUM (ds.reads)                 AS reads,
#         SUM (ds.writes)                AS writes,
#         SUM (ds.bytes_read)            AS bytes_read,
#         SUM (ds.bytes_written)         AS bytes_written,
#         SUM (ds.reads + ds.writes)     AS iops
#    FROM v$asm_disk_stat ds, v$asm_diskgroup_stat g, v$instance i
#   WHERE ds.mount_status = 'CACHED' AND ds.group_number = g.group_number
#GROUP BY i.instance_number,
#         i.host_name,
#         i.instance_name,
#         g.name
#'''

[[metric]]
context = "asm_disk_stat"
labels = [ "inst_id", "node_name", "instance_name", "diskgroup_name", "disk_number", "failgroup", "path" ]
metricsdesc = { reads = "Total number of I/O read requests for the DG.", writes = "Total number of I/O write requests for the DG.", read_time = "Total I/O time (in hundreths of a second) for read requests for the disk", write_time = "Total I/O time (in hundreths of a second) for write requests for the disk", bytes_read = "Total number of bytes read from the DG", bytes_written = "Total number of bytes written from the DG", iops = "Total number of I/O requests for the DG" }
metricstype = { reads = "counter", writes = "counter", bytes_read = "counter", read_time = "counter", write_time = "counter", bytes_written = "counter", iops = "counter" }
request = '''
  SELECT i.instance_number                         AS inst_id,
         i.host_name                               AS node_name,
         i.instance_name,
         g.name                                    AS diskgroup_name,
         ds.disk_number                            AS disk_number,
         ds.failgroup                              AS failgroup,
         ds.reads                                  AS reads,
         ds.writes                                 AS writes,
         ds.read_time * 1000                       AS read_time,
         ds.write_time * 1000                      AS write_time,
         ds.bytes_read                             AS bytes_read,
         ds.bytes_written                          AS bytes_written,
         REGEXP_REPLACE (ds.PATH, '.*/\', '\')     AS PATH,
         ds.reads + ds.writes                      AS iops  
    FROM v$asm_disk_stat ds, v$asm_diskgroup_stat g, v$instance i
   WHERE ds.mount_status = 'CACHED' AND ds.group_number = g.group_number
'''

[[metric]]
context = "asm_space_consumers"
labels = [ "inst_id", "diskgroup_name", "node_name", "instance_name", "sid", "file_type" ]
metricsdesc = { size_mb = "Total space usage by db by file_type" , files = "Number of files by db by type" }
request = '''
  SELECT i.instance_number                     AS inst_id,
         i.host_name                           AS node_name,
         i.instance_name,
         gname                                 AS diskgroup_name,
         dbname                                AS sid,
         file_type,
         ROUND (SUM (space) / 1024 / 1024)     size_mb,
         COUNT (*)                             AS files
    FROM v$instance i,
         (SELECT gname,
                 REGEXP_SUBSTR (full_alias_path,
                                '[[:alnum:]_]*',
                                1,
                                4)    dbname,
                 file_type,
                 space,
                 aname,
                 system_created,
                 alias_directory
            FROM (    SELECT CONCAT ('+' || gname,
                                     SYS_CONNECT_BY_PATH (aname, '/'))
                                 full_alias_path,
                             system_created,
                             alias_directory,
                             file_type,
                             space,
                             LEVEL,
                             gname,
                             aname
                        FROM (SELECT b.name                gname,
                                     a.parent_index        pindex,
                                     a.name                aname,
                                     a.reference_index     rindex,
                                     a.system_created,
                                     a.alias_directory,
                                     c.TYPE                file_type,
                                     c.space
                                FROM v$asm_alias a, v$asm_diskgroup b, v$asm_file c
                               WHERE     a.group_number = b.group_number
                                     AND a.group_number = c.group_number(+)
                                     AND a.file_number = c.file_number(+)
                                     AND a.file_incarnation = c.incarnation(+))
                  START WITH     (MOD (pindex, POWER (2, 24))) = 0
                             AND rindex IN
                                     (SELECT a.reference_index
                                        FROM v$asm_alias a, v$asm_diskgroup b
                                       WHERE     a.group_number =
                                                 b.group_number
                                             AND (MOD (a.parent_index,
                                                       POWER (2, 24))) =
                                                 0)
                  CONNECT BY PRIOR rindex = pindex)
           WHERE NOT file_type IS NULL AND system_created = 'Y')
GROUP BY i.instance_number,
         i.host_name,
         i.instance_name,
         gname,
         dbname,
         file_type
'''
[[metric]]
context = "fra"
metricsdesc = {space_limit = "max size.", space_used = "used space.", space_reclaimable = "reclaimable space."}
request = "select space_limit,space_used,space_reclaimable from v$recovery_file_dest"

[[metric]]
context = "recovery_area"
metricsdesc = {fra_usage = "Fast Recovery Area Usage %."}
request = "select round((space_used-space_reclaimable)*100/space_limit,1) fra_usage from  v$recovery_file_dest"

[[metric]]
context = "slow_queries"
metricsdesc = { p95_time_usecs= "Gauge metric with percentile 95 of elapsed time.", p99_time_usecs= "Gauge metric with percentile 99 of elapsed time." }
request = "select  percentile_disc(0.95)  within group (order by elapsed_time) as p95_time_usecs, percentile_disc(0.99)  within group (order by elapsed_time) as p99_time_usecs from v$sql where last_active_time >= sysdate - 5/(24*60)"

[[metric]]
context = "big_queries"
metricsdesc = { p95_rows= "Gauge metric with percentile 95 of returned rows.", p99_rows= "Gauge metric with percentile 99 of returned rows." }
request = "select  percentile_disc(0.95)  within group (order by rownum) as p95_rows, percentile_disc(0.99)  within group (order by rownum) as p99_rows from v$sql where last_active_time >= sysdate - 5/(24*60)"


[[metric]]
context = "sysmetric"
metricsdesc = { value="Generic gauge metric from v$sysmetric view in Oracle." }
labels = [ "metric_name" ]
request = "SELECT metric_name, value FROM v$sysmetric WHERE group_id=2"
